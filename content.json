{"pages":[{"title":"关于","text":"个人详细介绍","link":"/about/index.html"}],"posts":[{"title":"Toast的基本用法","text":"Toast是Android系统提供的一种提醒方式，它可以将一些短信息在Activity上通知用户，过段时间后会自动消失，并且不会占用屏幕空间。 如何使用首先需要定义一个弹出Toast的触发点，在Acivity中添加一个Button按钮用于触发Toast的提示框。 123456789101112131415@Overrideprotected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); //获取布局文件的元素 Button button1 = findViewById(R.id.button_1); //为button1添加点击事件 button1.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { //创建Toast对象调用静态方法makeText()传递参数 Toast.makeText(MainActivity.this,\"Toast提示\",Toast.LENGTH_LONG).show(); } });} Toast.makeText()需要传递3个参数 Toast上下文对象，传递Activity本身即可 字符串数据，用于显示内容 Toast的显示时长，有两个常量可以设置可以选择LENGTH_LONG和LENGTH_SHORT。 运行效果","link":"/2019/03/15/Toast的基本用法/"},{"title":"Android全局大喇叭-广播机制","text":"广播分类 1.标准广播 一种异步执行的广播，在广播发出之后，所有的广播接收器都会在同一时刻接收到这条广播消息，这种广播效率会更高，但也意味着它无法被截断。2.有序广播 一种同步执行的广播，在广播发出之后同一时刻只会有一个广播接收器收到这条广播消息，当这个广播接收器逻辑执行完毕之后，广播才会继续传递。广播是有先后顺序的，优先级越高的接收器会先接收到，并且可以对广播进行截断。 接收系统广播Android内容了很多系统广播，我们可以在应用程序中通过广播接收器来得到各种系统的状态信息，例如当手机完全开机后、电池电量过低时、时间或区域发生变化时系统都会发送广播信息。 如何注册广播注册广播接收器有两种方式，一种是在代码中动态注册，一种是在AndroidManifest.xml中静态注册。 动态注册广播-实现监听网络状态[MainActivity.java]123456789101112131415161718192021222324252627282930313233343536public class MainActivity extends AppCompatActivity { //创建意图过滤器对象 private IntentFilter intentFilter; //创建广播接收器对象 private NetworkChangeReceiver networkChangeReceiver; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); intentFilter = new IntentFilter(); //当网络状态发生变化时，系统会发出android.net.conn.CONNECTIVITY_CHANGE的广播 intentFilter.addAction(\"android.net.conn.CONNECTIVITY_CHANGE\"); networkChangeReceiver = new NetworkChangeReceiver(); //注册广播接收器传递参数 registerReceiver(networkChangeReceiver, intentFilter); } //动态注册广播接收器最后都需要取消注册 @Override protected void onDestroy() { super.onDestroy(); //通过此方法取消注册 unregisterReceiver(networkChangeReceiver); } //定义内部类 用于接收监听网络状态发生变化的广播 class NetworkChangeReceiver extends BroadcastReceiver { //当网络状态发生变化时执行的方法 @Override public void onReceive(Context context, Intent intent) { Toast.makeText(context, \"network changes\", Toast.LENGTH_SHORT).show(); } }} 上面当网络状态的变化时通过Toast进行提示。动态注册广播接收器可以自由的控制注册和注销，但它缺点就是只有当页面正常启动后才能够接收到广播消息，所以注册程序都写在onCreate()方法中。 静态注册广播-实现开机启动 前面说了动态注册广播需要页面正常启动后才会接收广播消息，那么静态注册就可以让程序在未启动的情况下也能接收广播消息。 让程序接收开机广播，可以使用AndroidStudio提供的快捷方式来创建广播接收器，右击包名→New→Other→Broadcast Receiver会弹出如下图窗口。 Exported属性表示是否允许广播接收器接收本程序以外的广播Enabled属性表示是否启用这个广播接收器勾选这两个属性点击Finish完成创建 [BootCompleteReceiver.java]1234567public class BootCompleteReceiver extends BroadcastReceiver { @Override public void onReceive(Context context, Intent intent) { Toast.makeText(context, \"广播接收器静态注册\",Toast.LENGTH_SHORT).show(); }} 在刚刚创建的接收器中修改代码如上，另外如果想接收开机广播还需要在AndroidManifest.xml中添加系统权限,可以看到AndroidStudio自动帮我们创建了receiver标签在里面添加action。监听系统开机广播也需要添加uses-permission声明权限。 [AndroidManifest.xml]123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:tools=\"http://schemas.android.com/tools\" package=\"com.example.admin.broadcasttest\"&gt; &lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt; &lt;!--声明权限--&gt; &lt;uses-permission android:name=\"android.permission.RECEIVE_BOOT_COMPLETED\"/&gt; &lt;application ... &lt;receiver android:name=\".BootCompleteReceiver\" android:enabled=\"true\" android:exported=\"true\"&gt; &lt;!--声明权限--&gt; &lt;intent-filter&gt; &lt;action android:name=\"android.intent.action.BOOT_COMPLETED\"/&gt; &lt;/intent-filter&gt; &lt;/receiver&gt; &lt;/application&gt;&lt;/manifest&gt;","link":"/2019/03/21/广播机制/"}],"tags":[{"name":"Android","slug":"Android","link":"/tags/Android/"}],"categories":[{"name":"移动开发","slug":"移动开发","link":"/categories/移动开发/"}]}